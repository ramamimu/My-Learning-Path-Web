# JavaScript Display Possibilities

Writing into an HTML element, using innerHTML.
Writing into the HTML output using document.write().
Writing into an alert box, using window.alert().
Writing into the browser console, using console.log().

## ALL Example
<button onclick="this.innerHTML=Date()">The time is?</button>
innerHTML = 5 + 6;
document.write(5 + 6);
<button type="button" onclick="document.write(5 + 6)">Try it</button>
window.alert(5 + 6);
alert(5 + 6);
console.log(5 + 6);
<button onclick="window.print()">Print this page</button>

## JavaScript Keywords
Keyword	        Description
var	            Declares a variable
let	            Declares a block variable
const	        Declares a block constant
if	            Marks a block of statements to be executed on a condition
switch	        Marks a block of statements to be executed in different cases
for	            Marks a block of statements to be executed in a loop
function        Declares a function
return	        Exits a function
try	            Implements error handling to a block of statements

## Common HTML Events

Event	        Description
onchange	    An HTML element has been changed
onclick	        The user clicks an HTML element
onmouseover	    The user moves the mouse over an HTML element
onmouseout	    The user moves the mouse away from an HTML element
onkeydown	    The user pushes a keyboard key
onload	        The browser has finished loading the page

## STRING METHODS

let txt = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
txt.length     // Returns 26

let str = "Apple, Banana, Kiwi";
str.slice(7, 13)     // Returns Banana

let str = "Apple, Banana, Kiwi";
str.slice(-12, -6)    // Returns Banana
str.slice(7);    // Returns Banana,Kiwi
str.slice(-12)    // Returns Banana,Kiwi

let str = "Apple, Banana, Kiwi";
str.substr(7, 6)    // Returns Banana
str.substr(7)    // Returns Banana,Kiwi
str.substr(-4)    // Returns Kiwi

let text = "Please visit Microsoft!";
let newText = text.replace("Microsoft", "W3Schools");
let newText = text.replace("MICROSOFT", "W3Schools"); // doent work bcz its case sensitive
let newText = text.replace(/MICROSOFT/i, "W3Schools"); // replace with ignore case sensitive and replace one by one in every single running
let text = "Please visit Microsoft and Microsoft!";
let newText = text.replace(/Microsoft/g, "W3Schools"); // replace in one execution

let text1 = "Hello World!";       // String
let text2 = text1.toUpperCase();  // text2 is text1 converted to upper
let text2 = text1.toLowerCase();  // text2 is text1 converted to lower

let text1 = "Hello";
let text2 = "World";
let text3 = text1.concat(" ", text2);
similar with
text = "Hello" + " " + "World!";

let text = "       Hello World!        ";
text.trim()    // Returns "Hello World!", ignore white space

let text = "5";
text.padStart(4,0)      // Returns 0005
text.padEnd(4,0)        // Returns 5000

text,indexOf("H");      // return value where is "H" placed

let text = "HELLO WORLD";
text.charAt(0)              // Returns H
text[0]                     // returns H. difference is if undefine, charAt return "", but [..] will undefined.
text.charCodeAt(0)          // Returns 72 The method returns a UTF-16 code (an integer between 0 and 65535).

let text = "a,b,c,d,e,f";
const myArray = text.split("c");    // return a,b,

let str = "Please locate where 'locate' occurs!";
str.indexOf("locate")           // Returns 7
str.lastIndexOf("locate")       // Returns 21
str.lastIndexOf("John")         // Returns -1
str.indexOf("locate", 15)       // Returns 21. Both methods accept a second parameter as the starting position for the search
str.lastIndexOf("locate", 15)   // Returns 7
str.search("locate")            // Returns 7. search() method searches a string for a specified value and returns the position of the match
//////////////////////////
difference 
    The search() method cannot take a second start position argument.
    The indexOf() method cannot take powerful search values (regular expressions).
//////////////////////////
let text = "The rain in SPAIN stays mainly in the plain";
text.match(/ain/g)    // Returns an array [ain,ain,ain]
////////////////////////
string.match(regexp)
regexp      : Required. The value to search for, as a regular expression.
Returns     : An Array, containing the matches, one item for each match, or null if no match is found.
////////////////////////
text.match(/ain/gi)   // Returns an array [ain,AIN,ain,ain]

let text = "Hello world, welcome to the universe.";
text.includes("world")    // Returns true
///////////////////////////
string.includes(searchvalue, start)
searchvalue	Required. The string to search for
start	Optional. Default 0. Position to start the search
Returns:	Returns true if the string contains the value, otherwise false
JS Version:	ES6 (2015)
///////////////////////////
text.includes("world", 12)    // Returns false

let text = "Hello world, welcome to the universe.";
text.startsWith("Hello")   // Returns true
//////////////////////////
string.startsWith(searchvalue, start)
Parameter Values
Parameter	Description
searchvalue	Required. The value to search for.
start	Optional. Default 0. The position to start the search
//////////////////////////
let text = "Hello world, welcome to the universe.";
text.startsWith("world")    // Returns false
text.startsWith("world", 5)    // Returns false
text.startsWith("world", 6)    // Returns true

var text = "John Doe";
text.endsWith("Doe")    // Returns true

## JavaScript Template Literals
(Template Literals are not supported in Internet Explorer.)
### Template Literals
`` (back quotes), allow multiple line but not supported in internet explore

### Interpolation and Subtitution
let firstName = "John";
let lastName = "Doe";
let text = `Welcome ${firstName}, ${lastName}`;

let price = 10;
let VAT = 0.25;
let total = `Total: ${(price * (1 + VAT)).toFixed(2)}`;

### HTML Templates
let header = "Templates Literals";
let tags = ["template literals", "javascript", "es6"];
let html = `<h2>${header}</h2><ul>`;
for (const x of tags) {
  html += `<li>${x}</li>`;
}
html += `</ul>`;


# HEXADECIMAL
let myNumber = 32;
myNumber.toString(10);  // returns 32
myNumber.toString(32);  // returns 10
myNumber.toString(16);  // returns 20
myNumber.toString(8);   // returns 40
myNumber.toString(2);   // returns 100000


# NUMBER METHODS
let x = 123;
x.toString();            // returns 123 from variable x
(123).toString();        // returns 123 from literal 123
(100 + 23).toString();   // returns 123 from expression 100 + 23

let x = 9.656;
x.toExponential(2);     // returns 9.66e+0
x.toExponential(4);     // returns 9.6560e+0
x.toExponential(6);     // returns 9.656000e+0

let x = 9.656;
x.toFixed(0);           // returns 10
x.toFixed(2);           // returns 9.66
x.toFixed(4);           // returns 9.6560
x.toFixed(6);           // returns 9.656000

let x = 9.656;
x.toPrecision();        // returns 9.656
x.toPrecision(2);       // returns 9.7
x.toPrecision(4);       // returns 9.656
x.toPrecision(6);       // returns 9.65600

let x = 123;
x.valueOf();            // returns 123 from variable x
(123).valueOf();        // returns 123 from literal 123
(100 + 23).valueOf();   // returns 123 from expression 100 + 23

/////////////////////////////
//////typeof variable//////// to check type of variable
/////////////////////////////


# Converting Variables to Numbers
    The Number() method
    The parseInt() method
    The parseFloat() method

Number(true);          // returns 1
Number(false);         // returns 0
Number("10");          // returns 10
Number("  10");        // returns 10
Number("10  ");        // returns 10
Number(" 10  ");       // returns 10
Number("10.33");       // returns 10.33
Number("10,33");       // returns NaN
Number("10 33");       // returns NaN
Number("John");        // returns NaN


Number(new Date("2017-09-30"));    // returns 1506729600000
The Number() method above returns the number of milliseconds since 1.1.1970.
d.getFullYear();
d.getMonth();

parseFloat("10");        // returns 10
parseFloat("10.33");     // returns 10.33
parseFloat("10 20 30");  // returns 10
parseFloat("10 years");  // returns 10
parseFloat("years 10");  // returns NaN


## Number Properties
Property    	        Description
MAX_VALUE	            Returns the largest number possible in JavaScript
MIN_VALUE   	        Returns the smallest number possible in JavaScript
POSITIVE_INFINITY	    Represents infinity (returned on overflow)
NEGATIVE_INFINITY	    Represents negative infinity (returned on overflow)
NaN	                    Represents a "Not-a-Number" value

let x = Number.MAX_VALUE;
let x = Number.POSITIVE_INFINITY;
let x = Number.NEGATIVE_INFINITY;
let x = Number.NaN;              

# ARRAY
const cars = new Array("Saab", "Volvo", "BMW");

const person = ["John", "Doe", 46];
const person = {firstName:"John", lastName:"Doe", age:46};

cars.length   // Returns the number of elements
cars.sort()   // Sorts the array

const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits[0];    // Returns "Banana"

### Two Different Looping Way
///////////////////////

const fruits = ["Banana", "Orange", "Apple", "Mango"];
let fLen = fruits.length;

text = "<ul>";
for (let i = 0; i < fLen; i++) {
  text += "<li>" + fruits[i] + "</li>";
}
text += "</ul>";

////////////////////////
////////////////////////

const fruits = ["Banana", "Orange", "Apple", "Mango"];

let text = "<ul>";
fruits.forEach(myFunction);
text += "</ul>";
document.getElementById("demo").innerHTML = text;

function myFunction(value) {
  text += "<li>" + value + "</li>";
} 

/////////////////////////

const fruits = ["Banana", "Orange", "Apple"];
fruits.push("Lemon");  // Adds a new element (Lemon) to fruits

const fruits = ["Banana", "Orange", "Apple"];
fruits[fruits.length] = "Lemon";  // Adds "Lemon" to fruits

const points = new Array();     // Bad
const points = [];              // Good 


# JavaScript Array Methods
## Converting Arrays to Strings
const fruits = ["Banana", "Orange", "Apple", "Mango"];
document.getElementById("demo").innerHTML = fruits.toString();      // Banana,Orange,Apple,Mango

const fruits = ["Banana", "Orange", "Apple", "Mango"];
document.getElementById("demo").innerHTML = fruits.join(" * ");     // Banana * Orange * Apple * Mango

variable.push(value)        // adding
variable.pop()              // removing last
variable.unshift(valur)     // adding in first element
variable.shift();           // Removes first element

## Splicing An Array
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.splice(2, 0, "Lemon", "Kiwi");
///////////////////////////////
The first parameter (2) defines the position where new elements should be added (spliced in).
The second parameter (0) defines how many elements should be removed.
The rest of the parameters ("Lemon" , "Kiwi") define the new elements to be added.
The splice() method returns an array with the deleted items.
/////////////////////////////
fruits.splice(0, 1);        // Removes the first element

## Merging (Concatenating) Arrays
const myGirls = ["Cecilie", "Lone"];
const myBoys = ["Emil", "Tobias", "Linus"];
const myChildren = myGirls.concat(myBoys);      // Concatenate (join) myGirls and myBoys

const arr1 = ["Cecilie", "Lone"];
const arr2 = ["Emil", "Tobias", "Linus"];
const arr3 = ["Robin", "Morgan"];
const myChildren = arr1.concat(arr2, arr3);     // more concat

## Slicing an Array
The slice() method slices out a piece of an array into a new array.

const fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];
const citrus = fruits.slice(1);     // "Orange", "Lemon", "Apple", "Mango"

const fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];
const citrus = fruits.slice(3);     // Apple,Mango

const fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];
const citrus = fruits.slice(1, 3);  // Orange,Lemon


## SORT
const fruits = ["Banana", "Orange", "Apple", "Mango"];fruits.sort();        // Sorts the elements of fruits
fruits.reverse();     // Then reverse the order of the elements
points.sort(function(a, b){return a - b});      // default sort is ascending in string, but it doesnt work in number, thats the way to handle

## Sorting an Array in Random Order
const points = [40, 100, 1, 5, 25, 10];
points.sort(function(a, b){return 0.5 - Math.random()});

-------------//-----------
(The Fisher Yates Method)
const points = [40, 100, 1, 5, 25, 10];

for (let i = points.length -1; i > 0; i--) {
  let j = Math.floor(Math.random() * i)
  let k = points[i]
  points[i] = points[j]
  points[j] = k
}
-------------//------------

## Find the Highest (or Lowest) Array Value
get from first index on sort
or
algoritma sederhana lainne


# Iteration
## Array.forEach();
const numbers = [45, 4, 9, 16, 25];
let txt = "";
numbers.forEach(myFunction);

function myFunction(value, index, array) {
  txt += value + "<br>";
}

## Array.map()
(method creates a new array by performing a function on each array element, method does not change the original array)
const numbers1 = [45, 4, 9, 16, 25];
const numbers2 = numbers1.map(myFunction);

document.getElementById("demo").innerHTML = numbers2;

function myFunction(value, index, array) {
  return value * 2;
}

## Array.filter()
( method creates a new array with array elements that passes a test)
const numbers = [45, 4, 9, 16, 25];
const over18 = numbers.filter(myFunction);

function myFunction(value, index, array) {
  return value > 18;
}

## Array.reduce()
const numbers = [45, 4, 9, 16, 25];
let sum = numbers.reduce(myFunction);
document.getElementById("demo").innerHTML = "The sum is " + sum;

function myFunction(total, value, index, array) {
  return total + value;
}

or
const numbers = [45, 4, 9, 16, 25];
let sum = numbers.reduce(myFunction, 100);

function myFunction(total, value) {
  return total + value;
}

## Array.every()    // is all pass test?
## Array.some()     // is some pass test?
## Array.find()     // is find a value?


# DATE OBJECT
const d = new Date();     // show date now. if give parameter, its will convert to ms since january 1970



new Date()
new Date(year, month, day, hours, minutes, seconds, milliseconds)
new Date(milliseconds)
new Date(date string)

Zero time is January 01, 1970 00:00:00 UTC.

const d = new Date("October 13, 2014 11:13:00");

const d = new Date("2015-03-25");
Wed Mar 25 2015 07:00:00 GMT+0700 (Indochina Time)

{
  const d = new Date();

  document.getElementById("demo").innerHTML = d;
  Sun Jul 25 2021 07:19:59 GMT+0700 (Indochina Time)

  document.getElementById("demo").innerHTML = d.toString();
  Sun Jul 25 2021 07:19:30 GMT+0700 (Indochina Time)

  document.getElementById("demo").innerHTML = d.toUTCString();
  Sun, 25 Jul 2021 00:19:29 GMT

  document.getElementById("demo").innerHTML = d.toDateString();
  Sun Jul 25 2021

  document.getElementById("demo").innerHTML = d.toISOString();
}

These methods can be used for getting information from a date object:
Method	              Description
getFullYear()	        Get the year as a four digit number (yyyy)
getMonth()	          Get the month as a number (0-11)
getDate()	            Get the day as a number (1-31)
getHours()	          Get the hour (0-23)
getMinutes()	        Get the minute (0-59)
getSeconds()	        Get the second (0-59)
getMilliseconds()	    Get the millisecond (0-999)
getTime()	            Get the time (milliseconds since January 1, 1970)
getDay()	            Get the weekday as a number (0-6)
Date.now()	          Get the time. ECMAScript 5.

## Set Date Methods

Method	      Description
setDate()	        Set the day as a number (1-31)
setFullYear()	    Set the year (optionally month and day)
setHours()	      Set the hour (0-23)
setMilliseconds()	Set the milliseconds (0-999)
setMinutes()	    Set the minutes (0-59)
setMonth()	      Set the month (0-11)
setSeconds()	    Set the seconds (0-59)
setTime()	        Set the time (milliseconds since January 1, 1970)

const d = new Date();
d.setFullYear(2020);
d.setFullYear(2020, 11, 3);
d.setMonth(11);
d.setDate(15);
d.setDate(d.getDate() + 50);
d.setHours(22);
d.setMinutes(30);
d.setSeconds(30);

ex 
{
    let text = "";
  const today = new Date();
  const someday = new Date();
  someday.setFullYear(2100, 0, 14);

  if (someday > today) {
    text = "Today is before January 14, 2100.";
  } else {
    text = "Today is after January 14, 2100.";
  }
}


# JavaScript Math Object
Math.PI;      // returns 3.141592653589793
Math.E        // returns Euler's number
Math.PI       // returns PI
Math.SQRT2    // returns the square root of 2
Math.SQRT1_2  // returns the square root of 1/2
Math.LN2      // returns the natural logarithm of 2
Math.LN10     // returns the natural logarithm of 10
Math.LOG2E    // returns base 2 logarithm of E
Math.LOG10E   // returns base 10 logarithm of E

// Only add Math....() in every single element which declare
Method	                Description
abs(x)	                Returns the absolute value of x
acos(x)	                Returns the arccosine of x, in radians
acosh(x)	              Returns the hyperbolic arccosine of x
asin(x)	                Returns the arcsine of x, in radians
asinh(x)	              Returns the hyperbolic arcsine of x
atan(x)	                Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians
atan2(y, x)	            Returns the arctangent of the quotient of its arguments
atanh(x)	              Returns the hyperbolic arctangent of x
cbrt(x)	                Returns the cubic root of x
ceil(x)	                Returns x, rounded upwards to the nearest integer
cos(x)	                Returns the cosine of x (x is in radians)
cosh(x)	                Returns the hyperbolic cosine of x
exp(x)	                Returns the value of Ex
floor(x)	              Returns x, rounded downwards to the nearest integer
log(x)	                Returns the natural logarithm (base E) of x
max(x, y, z, ..., n)	  Returns the number with the highest value
min(x, y, z, ..., n)	  Returns the number with the lowest value
pow(x, y)	              Returns the value of x to the power of y
random()	              Returns a random number between 0 and 1
round(x)	              Rounds x to the nearest integer
sign(x)	                Returns if x is negative, null or positive (-1, 0, 1)
sin(x)	                Returns the sine of x (x is in radians)
sinh(x)	                Returns the hyperbolic sine of x
sqrt(x)	                Returns the square root of x
tan(x)	                Returns the tangent of an angle
tanh(x)	                Returns the hyperbolic tangent of a number
trunc(x)	              Returns the integer part of a number (x)

<button onclick="document.getElementById('demo').innerHTML = getRndInteger(0,10)">Click Me</button>

<p id="demo"></p>

<script>
document.getElementById("demo").innerHTML =
Math.floor(Math.random() * 100) + 1;
</script>
<script>
function getRndInteger(min, max) {
  return Math.floor(Math.random() * (max - min)) + min;
}
</script>


# Complete Boolean Reference
Note the difference between (x==y) and (x===y).
Comparing two JavaScript objects will always return false.

# Comparison Operator
<script>
function myFunction() {
  let age = document.getElementById("age").value;
  let voteable = (age < 18) ? "Too young":"Old enough";
  document.getElementById("demo").innerHTML = voteable + " to vote.";
}
</script>


#  For in Object
<script>
  const person = {fname:"John", lname:"Doe", age:25};

  let text = "";
  for (let x in person) {
    text += person[x];
  }
</script>


var arr = [3, 5, 7];
arr.foo = "hello";   
for (var i in arr) {
  console.log(i); // logs "0", "1", "2", "foo"
}
    
for (var i of arr) {
  console.log(i); // logs "3", "5", "7"
  // it doesn't log "3", "5", "7", "hello"
}

(Remember that array define as object in js)
for..in iterates over all enumerable property keys of an object (show all possible key in object)

for..of iterates over the values of an iterable object. Examples of iterable objects are arrays, strings, and NodeLists. (show available value in array)

<script>
  var arr = [3, 5, 7];
  arr.foo = "hello";
      
  for (var i in arr) {
    console.log(i); // logs "0", "1", "2", "foo"
  }
      
  for (var i of arr) {
    console.log(i); // logs "3", "5", "7"
    // it doesn't log "3", "5", "7", "hello"
  }
</script>


<script>
const cars = ["BMW", "Volvo", "Saab", "Ford"];
let text = "";

list: {
  text += cars[0] + "<br>"; 
  text += cars[1] + "<br>"; 
  break list;
  text += cars[2] + "<br>"; 
  text += cars[3] + "<br>"; 
}

document.getElementById("demo").innerHTML = text;
</script>
// BMW, Volvo


# TYPE OF
typeof "John"                 // Returns "string"
typeof 3.14                   // Returns "number"
typeof NaN                    // Returns "number"
typeof false                  // Returns "boolean"
typeof [1,2,3,4]              // Returns "object"
typeof {name:'John', age:34}  // Returns "object"
typeof new Date()             // Returns "object"
typeof function () {}         // Returns "function"
typeof x                      // Returns "undefined" (if x has no value)
typeof null                   // Returns "object"

  The data type of NaN is number
  The data type of an array is object
  The data type of a date is object
  The data type of null is object
  The data type of an undefined variable is undefined *
  The data type of a variable that has not been assigned a value is also undefined *

typeof {name:'John', age:34} // Returns "object"
typeof [1,2,3,4]             // Returns "object" (not "array", see note below)
typeof null                  // Returns "object"
typeof function myFunc(){}   // Returns "function"

## The constructor Property

"John".constructor                // Returns function String()  {[native code]}
(3.14).constructor                // Returns function Number()  {[native code]}
false.constructor                 // Returns function Boolean() {[native code]}
[1,2,3,4].constructor             // Returns function Array()   {[native code]}
{name:'John',age:34}.constructor  // Returns function Object()  {[native code]}
new Date().constructor            // Returns function Date()    {[native code]}
function () {}.constructor        // Returns function Function(){[native code]}


/////////////////////////////////////////
<script>
const fruits = ["Banana", "Orange", "Apple"];
document.getElementById("demo").innerHTML = isArray(fruits);

function isArray(myArray) {
  return myArray.constructor.toString().indexOf("Array") > -1;
}
</script>
/////////////////////////////////////////////
////////////////// true /////////////////////
/////////////////////////////////////////////
